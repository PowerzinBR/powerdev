// powerFunctions.p.mjs
import { exec } from 'child_process';
import { writeFile } from 'fs/promises';
import chalk from 'chalk';

// Função para copiar um arquivo
async function copyFile(sourcePath, destinationPath) {
  try {
    await exec(`cp "${sourcePath}" "${destinationPath}"`);
    console.log(chalk.green(`Arquivo copiado de ${sourcePath} para ${destinationPath}`));
  } catch (error) {
    console.error(chalk.red(`Erro ao copiar o arquivo: ${error.message}`));
  }
}

// Função para criar um diretório
async function createDirectory(directoryPath) {
  try {
    await exec(`mkdir -p "${directoryPath}"`);
    console.log(chalk.green(`Diretório criado em ${directoryPath}`));
  } catch (error) {
    console.error(chalk.red(`Erro ao criar o diretório: ${error.message}`));
  }
}

// Função para ler o conteúdo de um arquivo
async function readFile(filePath) {
  try {
    const content = await fs.promises.readFile(filePath, 'utf8');
    return content;
  } catch (error) {
    console.error(chalk.red(`Erro ao ler o arquivo: ${error.message}`));
    return null;
  }
}

async function writeFile(filePath, content) {
  try {
    await fs.promises.writeFile(filePath, content, 'utf8');
    console.log(chalk.green(`Conteúdo escrito em ${filePath}`));
  } catch (error) {
    console.error(chalk.red(`Erro ao escrever o arquivo: ${error.message}`));
  }
}

export {
  copyFile,
  createDirectory,
  readFile,
  writeFile,
};
